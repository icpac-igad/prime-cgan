// This file is auto-generated by @hey-api/openapi-ts

export type AccumulationTime = '6h' | '24h';

export const AccumulationTime = {
    '6H': '6h',
    '24H': '24h'
} as const;

export type ForecastDate = {
    date: string;
};

export type ForecastMap = {
    image_url: string;
};

export type ForecastModel = {
    name: string;
    label: string;
    value: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type HealthCheck = {
    name: string;
    version: string;
    description: string;
};

export type IfsDataParameter = 'Total precipitation' | 'Surface pressure' | 'Pressure at mean sea level' | 'Two metre temperature' | 'Wind speed' | 'Surface runoff water';

export const IfsDataParameter = {
    TOTAL_PRECIPITATION: 'Total precipitation',
    SURFACE_PRESSURE: 'Surface pressure',
    PRESSURE_AT_MEAN_SEA_LEVEL: 'Pressure at mean sea level',
    TWO_METRE_TEMPERATURE: 'Two metre temperature',
    WIND_SPEED: 'Wind speed',
    SURFACE_RUNOFF_WATER: 'Surface runoff water'
} as const;

export type MaskArea = {
    name: string;
};

export type PrecipitationUnit = 'mm/h' | 'mm/6h' | 'mm/day' | 'mm/week';

export const PrecipitationUnit = {
    MM_H: 'mm/h',
    MM_6H: 'mm/6h',
    MM_DAY: 'mm/day',
    MM_WEEK: 'mm/week'
} as const;

export type ValidStartTime = '6' | '12' | '18' | '0' | 'all';

export const ValidStartTime = {
    6: '6',
    12: '12',
    18: '18',
    0: '0',
    ALL: 'all'
} as const;

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type VisualizationColorStyle = {
    name: string;
};

export type AppHealthCheckGetData = {
    body?: never;
    url: '/';
};

export type AppHealthCheckGetResponses = {
    /**
     * Successful Response
     */
    200: HealthCheck;
};

export type AppHealthCheckGetResponse = AppHealthCheckGetResponses[keyof AppHealthCheckGetResponses];

export type RobotsTxtRobotsTxtGetData = {
    body?: never;
    url: '/robots.txt';
};

export type RobotsTxtRobotsTxtGetResponses = {
    /**
     * Successful Response
     */
    200: Blob | File;
};

export type RobotsTxtRobotsTxtGetResponse = RobotsTxtRobotsTxtGetResponses[keyof RobotsTxtRobotsTxtGetResponses];

export type FaviconIcoFaviconIcoGetData = {
    body?: never;
    url: '/favicon.ico';
};

export type FaviconIcoFaviconIcoGetErrors = {
    /**
     * Successful Response
     */
    404: Blob | File;
};

export type FaviconIcoFaviconIcoGetError = FaviconIcoFaviconIcoGetErrors[keyof FaviconIcoFaviconIcoGetErrors];

export type GetGanForecastModelsSettingsGanForecastModelsGetData = {
    body?: never;
    url: '/settings/gan-forecast-models';
};

export type GetGanForecastModelsSettingsGanForecastModelsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastModel>;
};

export type GetGanForecastModelsSettingsGanForecastModelsGetResponse = GetGanForecastModelsSettingsGanForecastModelsGetResponses[keyof GetGanForecastModelsSettingsGanForecastModelsGetResponses];

export type GetForecastDatesSettingsDataDatesGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('jurre-brishti' | 'mvua-kubwa' | 'open-ifs') | null;
    };
    url: '/settings/data-dates';
};

export type GetForecastDatesSettingsDataDatesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetForecastDatesSettingsDataDatesGetError = GetForecastDatesSettingsDataDatesGetErrors[keyof GetForecastDatesSettingsDataDatesGetErrors];

export type GetForecastDatesSettingsDataDatesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastDate>;
};

export type GetForecastDatesSettingsDataDatesGetResponse = GetForecastDatesSettingsDataDatesGetResponses[keyof GetForecastDatesSettingsDataDatesGetResponses];

export type GetMaskAreasSettingsMaskAreasGetData = {
    body?: never;
    url: '/settings/mask-areas';
};

export type GetMaskAreasSettingsMaskAreasGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MaskArea>;
};

export type GetMaskAreasSettingsMaskAreasGetResponse = GetMaskAreasSettingsMaskAreasGetResponses[keyof GetMaskAreasSettingsMaskAreasGetResponses];

export type GetColorStylesSettingsColorStylesGetData = {
    body?: never;
    url: '/settings/color-styles';
};

export type GetColorStylesSettingsColorStylesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<VisualizationColorStyle>;
};

export type GetColorStylesSettingsColorStylesGetResponse = GetColorStylesSettingsColorStylesGetResponses[keyof GetColorStylesSettingsColorStylesGetResponses];

export type GetPredefinedLocationsSettingsLocationsGetData = {
    body?: never;
    path?: never;
    query?: {
        q?: string | null;
    };
    url: '/settings/locations';
};

export type GetPredefinedLocationsSettingsLocationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPredefinedLocationsSettingsLocationsGetError = GetPredefinedLocationsSettingsLocationsGetErrors[keyof GetPredefinedLocationsSettingsLocationsGetErrors];

export type GetPredefinedLocationsSettingsLocationsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MaskArea>;
};

export type GetPredefinedLocationsSettingsLocationsGetResponse = GetPredefinedLocationsSettingsLocationsGetResponses[keyof GetPredefinedLocationsSettingsLocationsGetResponses];

export type GetOpenIfsForecastForecastOpenIfsGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: string | null;
        vis_param?: IfsDataParameter | null;
    };
    url: '/forecast/open-ifs';
};

export type GetOpenIfsForecastForecastOpenIfsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOpenIfsForecastForecastOpenIfsGetError = GetOpenIfsForecastForecastOpenIfsGetErrors[keyof GetOpenIfsForecastForecastOpenIfsGetErrors];

export type GetOpenIfsForecastForecastOpenIfsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetOpenIfsForecastForecastOpenIfsGetResponse = GetOpenIfsForecastForecastOpenIfsGetResponses[keyof GetOpenIfsForecastForecastOpenIfsGetResponses];

export type GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: string | null;
        vis_param?: IfsDataParameter | null;
    };
    url: '/forecast/open-ifs-ensemble';
};

export type GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetError = GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetErrors[keyof GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetErrors];

export type GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetResponse = GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetResponses[keyof GetOpenIfsForecastEnsemblePlotsForecastOpenIfsEnsembleGetResponses];

export type GetCganForecastForecastCganForecastGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: string | null;
        start_time?: ValidStartTime | null;
        acc_time?: AccumulationTime | null;
    };
    url: '/forecast/cgan-forecast';
};

export type GetCganForecastForecastCganForecastGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganForecastForecastCganForecastGetError = GetCganForecastForecastCganForecastGetErrors[keyof GetCganForecastForecastCganForecastGetErrors];

export type GetCganForecastForecastCganForecastGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganForecastForecastCganForecastGetResponse = GetCganForecastForecastCganForecastGetResponses[keyof GetCganForecastForecastCganForecastGetResponses];

export type GetCganForecastEnsemblePlotForecastCganEnsembleGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: string | null;
        max_ens_plots?: number | null;
    };
    url: '/forecast/cgan-ensemble';
};

export type GetCganForecastEnsemblePlotForecastCganEnsembleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganForecastEnsemblePlotForecastCganEnsembleGetError = GetCganForecastEnsemblePlotForecastCganEnsembleGetErrors[keyof GetCganForecastEnsemblePlotForecastCganEnsembleGetErrors];

export type GetCganForecastEnsemblePlotForecastCganEnsembleGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganForecastEnsemblePlotForecastCganEnsembleGetResponse = GetCganForecastEnsemblePlotForecastCganEnsembleGetResponses[keyof GetCganForecastEnsemblePlotForecastCganEnsembleGetResponses];

export type GetCganThesholdChancePlotForecastCganThresholdChanceGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: string | null;
        threshold?: number | null;
        show_percentages?: boolean | null;
    };
    url: '/forecast/cgan-threshold-chance';
};

export type GetCganThesholdChancePlotForecastCganThresholdChanceGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganThesholdChancePlotForecastCganThresholdChanceGetError = GetCganThesholdChancePlotForecastCganThresholdChanceGetErrors[keyof GetCganThesholdChancePlotForecastCganThresholdChanceGetErrors];

export type GetCganThesholdChancePlotForecastCganThresholdChanceGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganThesholdChancePlotForecastCganThresholdChanceGetResponse = GetCganThesholdChancePlotForecastCganThresholdChanceGetResponses[keyof GetCganThesholdChancePlotForecastCganThresholdChanceGetResponses];

export type GetCganHistogramPlotForecastCganHistogramGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        location?: string | null;
        latitude?: number | null;
        longitude?: number | null;
        num_bins?: number | null;
        probability?: number | null;
    };
    url: '/forecast/cgan-histogram';
};

export type GetCganHistogramPlotForecastCganHistogramGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganHistogramPlotForecastCganHistogramGetError = GetCganHistogramPlotForecastCganHistogramGetErrors[keyof GetCganHistogramPlotForecastCganHistogramGetErrors];

export type GetCganHistogramPlotForecastCganHistogramGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganHistogramPlotForecastCganHistogramGetResponse = GetCganHistogramPlotForecastCganHistogramGetResponses[keyof GetCganHistogramPlotForecastCganHistogramGetResponses];
