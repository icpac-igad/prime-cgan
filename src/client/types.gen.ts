// This file is auto-generated by @hey-api/openapi-ts

export type AccumulationTime = '06h' | '24h';

export const AccumulationTime = {
    '06H': '06h',
    '24H': '24h'
} as const;

export type ForecastDate = {
    date: string;
};

export type ForecastMap = {
    image_url: string;
};

export type ForecastModel = {
    name: string;
    label: string;
    value: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type HealthCheck = {
    name: string;
    version: string;
    description: string;
};

export type IfsDataParameter = 'Total precipitation' | 'Surface pressure' | 'Pressure at mean sea level' | 'Two metre temperature' | 'Wind speed' | 'Surface runoff water';

export const IfsDataParameter = {
    TOTAL_PRECIPITATION: 'Total precipitation',
    SURFACE_PRESSURE: 'Surface pressure',
    PRESSURE_AT_MEAN_SEA_LEVEL: 'Pressure at mean sea level',
    TWO_METRE_TEMPERATURE: 'Two metre temperature',
    WIND_SPEED: 'Wind speed',
    SURFACE_RUNOFF_WATER: 'Surface runoff water'
} as const;

export type InitializationTime = '00h' | '06h' | '12h' | '18h';

export const InitializationTime = {
    '00H': '00h',
    '06H': '06h',
    '12H': '12h',
    '18H': '18h'
} as const;

export type MapColorScheme = 'ICPAC' | 'KMD' | 'EMI' | 'Default';

export const MapColorScheme = {
    ICPAC: 'ICPAC',
    KMD: 'KMD',
    EMI: 'EMI',
    DEFAULT: 'Default'
} as const;

export type MaskArea = {
    name: string;
};

export type PrecipitationUnit = 'mm/h' | 'mm/6h' | 'mm/day' | 'mm/week';

export const PrecipitationUnit = {
    MM_H: 'mm/h',
    MM_6H: 'mm/6h',
    MM_DAY: 'mm/day',
    MM_WEEK: 'mm/week'
} as const;

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ValidityTime = '06h' | '30h' | '36h' | '42h' | '48h' | '54h' | '78h' | '102h' | '126h' | '150h' | 'all';

export const ValidityTime = {
    '06H': '06h',
    '30H': '30h',
    '36H': '36h',
    '42H': '42h',
    '48H': '48h',
    '54H': '54h',
    '78H': '78h',
    '102H': '102h',
    '126H': '126h',
    '150H': '150h',
    ALL: 'all'
} as const;

export type VisualizationColorStyle = {
    name: string;
};

export type AppHealthCheckGetData = {
    body?: never;
    url: '/';
};

export type AppHealthCheckGetResponses = {
    /**
     * Successful Response
     */
    200: HealthCheck;
};

export type AppHealthCheckGetResponse = AppHealthCheckGetResponses[keyof AppHealthCheckGetResponses];

export type RobotsTxtRobotsTxtGetData = {
    body?: never;
    url: '/robots.txt';
};

export type RobotsTxtRobotsTxtGetResponses = {
    /**
     * Successful Response
     */
    200: Blob | File;
};

export type RobotsTxtRobotsTxtGetResponse = RobotsTxtRobotsTxtGetResponses[keyof RobotsTxtRobotsTxtGetResponses];

export type FaviconIcoFaviconIcoGetData = {
    body?: never;
    url: '/favicon.ico';
};

export type FaviconIcoFaviconIcoGetErrors = {
    /**
     * Successful Response
     */
    404: Blob | File;
};

export type FaviconIcoFaviconIcoGetError = FaviconIcoFaviconIcoGetErrors[keyof FaviconIcoFaviconIcoGetErrors];

export type GetGanForecastModelsSettingsGanForecastModelsGetData = {
    body?: never;
    url: '/settings/gan-forecast-models';
};

export type GetGanForecastModelsSettingsGanForecastModelsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastModel>;
};

export type GetGanForecastModelsSettingsGanForecastModelsGetResponse = GetGanForecastModelsSettingsGanForecastModelsGetResponses[keyof GetGanForecastModelsSettingsGanForecastModelsGetResponses];

export type GetForecastDatesSettingsDataDatesGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('jurre-brishti' | 'mvua-kubwa' | 'open-ifs') | null;
    };
    url: '/settings/data-dates';
};

export type GetForecastDatesSettingsDataDatesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetForecastDatesSettingsDataDatesGetError = GetForecastDatesSettingsDataDatesGetErrors[keyof GetForecastDatesSettingsDataDatesGetErrors];

export type GetForecastDatesSettingsDataDatesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastDate>;
};

export type GetForecastDatesSettingsDataDatesGetResponse = GetForecastDatesSettingsDataDatesGetResponses[keyof GetForecastDatesSettingsDataDatesGetResponses];

export type GetMaskAreasSettingsMaskAreasGetData = {
    body?: never;
    url: '/settings/mask-areas';
};

export type GetMaskAreasSettingsMaskAreasGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MaskArea>;
};

export type GetMaskAreasSettingsMaskAreasGetResponse = GetMaskAreasSettingsMaskAreasGetResponses[keyof GetMaskAreasSettingsMaskAreasGetResponses];

export type GetColorStylesSettingsColorStylesGetData = {
    body?: never;
    url: '/settings/color-styles';
};

export type GetColorStylesSettingsColorStylesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<VisualizationColorStyle>;
};

export type GetColorStylesSettingsColorStylesGetResponse = GetColorStylesSettingsColorStylesGetResponses[keyof GetColorStylesSettingsColorStylesGetResponses];

export type GetOpenIfsForecastOpenIfsForecatsOpenIfsGetData = {
    body?: never;
    path?: never;
    query?: {
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        vis_param?: IfsDataParameter | null;
        color_style?: MapColorScheme | null;
    };
    url: '/open-ifs-forecats/open-ifs';
};

export type GetOpenIfsForecastOpenIfsForecatsOpenIfsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOpenIfsForecastOpenIfsForecatsOpenIfsGetError = GetOpenIfsForecastOpenIfsForecatsOpenIfsGetErrors[keyof GetOpenIfsForecastOpenIfsForecatsOpenIfsGetErrors];

export type GetOpenIfsForecastOpenIfsForecatsOpenIfsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetOpenIfsForecastOpenIfsForecatsOpenIfsGetResponse = GetOpenIfsForecastOpenIfsForecatsOpenIfsGetResponses[keyof GetOpenIfsForecastOpenIfsForecatsOpenIfsGetResponses];

export type GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetData = {
    body?: never;
    path?: never;
    query?: {
        mask_area?: string | null;
        forecast_date?: string | null;
        plot_units?: PrecipitationUnit | null;
        vis_param?: IfsDataParameter | null;
        color_style?: MapColorScheme | null;
    };
    url: '/open-ifs-forecats/open-ifs-ensemble';
};

export type GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetError = GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetErrors[keyof GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetErrors];

export type GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetResponse = GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetResponses[keyof GetOpenIfsForecastEnsemblePlotsOpenIfsForecatsOpenIfsEnsembleGetResponses];

export type GetCganForecastCganForecatsCganForecastGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        init_time?: InitializationTime | null;
        acc_time?: AccumulationTime | null;
        valid_time?: ValidityTime | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: MapColorScheme | null;
    };
    url: '/cgan-forecats/cgan-forecast';
};

export type GetCganForecastCganForecatsCganForecastGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganForecastCganForecatsCganForecastGetError = GetCganForecastCganForecatsCganForecastGetErrors[keyof GetCganForecastCganForecatsCganForecastGetErrors];

export type GetCganForecastCganForecatsCganForecastGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganForecastCganForecatsCganForecastGetResponse = GetCganForecastCganForecatsCganForecastGetResponses[keyof GetCganForecastCganForecatsCganForecastGetResponses];

export type GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        init_time?: InitializationTime | null;
        acc_time?: AccumulationTime | null;
        valid_time?: ValidityTime | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: MapColorScheme | null;
        max_ens_plots?: number | null;
    };
    url: '/cgan-forecats/cgan-ensemble';
};

export type GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetError = GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetErrors[keyof GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetErrors];

export type GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetResponse = GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetResponses[keyof GetCganForecastEnsemblePlotCganForecatsCganEnsembleGetResponses];

export type GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetData = {
    body?: never;
    path?: never;
    query?: {
        model?: ('mvua-kubwa' | 'jurre-brishti') | null;
        mask_area?: string | null;
        forecast_date?: string | null;
        init_time?: InitializationTime | null;
        acc_time?: AccumulationTime | null;
        valid_time?: ValidityTime | null;
        plot_units?: PrecipitationUnit | null;
        color_style?: MapColorScheme | null;
        threshold?: number | null;
        show_percentages?: boolean | null;
    };
    url: '/cgan-forecats/cgan-threshold-chance';
};

export type GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetError = GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetErrors[keyof GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetErrors];

export type GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ForecastMap>;
};

export type GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetResponse = GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetResponses[keyof GetCganThesholdChancePlotCganForecatsCganThresholdChanceGetResponses];
